#!/usr/bin/env python
import matplotlib.pyplot as plt
import pysam
from optparse import OptionParser
import re
from os.path import exists

"""
Author:		Tom van der Valk
Contact: 	tvdvalk1989@gmail.com
Date: 		XXX
Citation:	XXX

Usage:		AMBER [options]

Example:	#plot aDNA diagnostics for a single bamfile
            AMBER --bamfiles bamfile.txt --output amber_test.pdf
		    #for more options:
		    AMBER --help
"""


"""
user provided input
"""
usage = "usage: python %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("--bamfiles", action="store", type="string", dest="bamfiles", help="A tab seperated list of bamfiles to be analyzed. First column of the file should contain sample name, second column should contain path to bamfile")
parser.add_option("--subsample", action="store", type="int", dest="subsample",default=10**12, help="Subsample bamfile to this number of reads. Default: 10^12")
parser.add_option("--min_mapq", action="store", type="int", dest="min_mapq",default=1, help="Minimum mapping quality of reads to be included in analysis. Default: 1")
parser.add_option("--exclude", action="store", type="string", dest="exclude", help="A file containing the chromosome/scaffold/contig names to exclude from all the analysis. Each line in the file should list one contig. Default: None")
parser.add_option("--output", action="store", type="string", dest="output", default="amber_plot", help="Output file name. Default: adna_diagnostics.pdf")
(options, args) = parser.parse_args()


"""
set global plotting parameters
"""
plt.rcParams['figure.figsize'] = [20, 10]
plt.rcParams["figure.autolayout"] = True
plt.rcParams['axes.linewidth'] = 1.25
plt.rcParams['font.size'] = 14
fig, ((ax1, ax2),(ax3,ax4)) = plt.subplots(2, 2)
colorlist = ["dimgray","darkred","lightskyblue","darkolivegreen"]
color_list_index = -1


"""
set global variables
"""
max_mismatch = 0
max_depth = 0
contigs_to_exclude = []
if options.exclude != None:
    contigs_to_exclude += open(options.exclude,"r").read().split("\n")


"""
loop through bamfiles
"""
if options.bamfiles == None:
    print("No bamfiles provided. Exiting...")
    exit()

with open(options.bamfiles) as f:
    bamfiles = f.readlines()
    if len(bamfiles) > 4:
        print("Maximum of 4 bamfiles allowed. Exiting...")
        exit()

    for line in bamfiles:
        sample_name = line.strip().split("\t")[0]
        print("Processing sample: " + sample_name)
        filepath = line.strip().split("\t")[1].strip()
        color_list_index += 1

        focal_bamfile = (pysam.AlignmentFile(filepath, "rb"))
  
        if focal_bamfile.header["HD"]["SO"] == "unsorted":
            print("Bamfile is unsorted. Only sorted bamfiles are supported. Exiting...")
            exit()


        """
        create bamfile index if it does not exist
        """
        file_exists = exists(filepath + ".bai")
        if not file_exists:
            print("Creating bamfile index... ",end=" ")
            pysam.index(filepath)
            focal_bamfile = (pysam.AlignmentFile(filepath, "rb"))
            print("Done creating bamfile index")

        """
        calculate and plot depth of bamfile in 1kb windows
        """
        #calculate depth per window and store in dictionary
        depth_dict = {}
        print("Calculating depth per window...", end=" ")
        for pileupcolumn in focal_bamfile.pileup(min_mapping_quality=options.min_mapq):
            contig,pos,depth = pileupcolumn.reference_name, pileupcolumn.pos, pileupcolumn.n
            if contig not in contigs_to_exclude:
                if contig not in depth_dict:
                    depth_dict[contig] = {}
                rounded_pos = int(round(pos/1000,0))
                if rounded_pos not in depth_dict[contig]:
                    depth_dict[contig][rounded_pos] = depth
                else:
                    depth_dict[contig][rounded_pos] += depth
        #calculate average depth per window
        window_depth_list = [0,0]
        for key,value in depth_dict.items():
            for contig_positions,depth_value in value.items():
                window_depth = round(depth_value/1000,2)
                window_depth_list[0] += window_depth
                window_depth_list[1] += 1
        average_window_depth = round(window_depth_list[0]/window_depth_list[1],3)
        #plot histogram of window depth
        histogram_dict = {}
        average_xaxis_line = [0,0]
        for key,value in depth_dict.items():
            for contig_positions,depth_value in value.items():
                window_depth = round(depth_value/1000,2)
                if window_depth < average_window_depth:
                    average_xaxis_line[0] += window_depth
                    average_xaxis_line[1] += 1
                if window_depth > average_window_depth*10: #merge all windows with more than 10X the average depth
                    window_depth = average_window_depth*10
                if window_depth not in histogram_dict:
                    histogram_dict[window_depth] = 1
                else:
                    histogram_dict[window_depth] += 1
        x_axis_depth,y_axis_depth = [],[]
        all_depths = sum(histogram_dict.values())
        for key,value in histogram_dict.items():
            x_axis_depth += [key]
            y_axis_depth += [(value/all_depths)*100]
            if value/all_depths > max_depth:
                max_depth = value/all_depths
        ax4.bar(x_axis_depth,y_axis_depth,color=colorlist[color_list_index],width=0.01,label=sample_name)#,alpha=0.5)
        ax4.axvline(x = average_xaxis_line[0]/average_xaxis_line[1], linestyle='dashed', color = colorlist[color_list_index],zorder=0)
        print("Done calculating depth per window")

        """
        set sample specific variables
        """
        readcounter = 0
        mismatch_dict = {}
        for i in range(301):
            mismatch_dict[i] = []
        readlen_dict = {}
        for i in range(301):
            readlen_dict[i] = 0
        dna_damage_dict = {"CpG": [0] * 31, "CT" : [0] * 31 ,"other":[0] * 31}
        cpg_sites = [0] * 31


        """
        loop through reads
        """
        print("Calculating mismatch rate and DNA damage...", end=" ")
        for read in focal_bamfile.fetch():
            read_contig = read.reference_name
            if read_contig not in contigs_to_exclude:
                read_mapping_quality = read.mapping_quality
                if read_mapping_quality >= options.min_mapq:
                    readcounter += 1
                    if readcounter > options.subsample:
                        break
                    read_length = len(read.query_sequence)
                    read_sequence = read.query_sequence
                    edit_distance = read.get_tag("NM")
                    MD_string = read.get_tag("MD")
                    cigar = read.cigarstring
                    if "N" in read_sequence or "N" in MD_string or "I" in cigar or "D" in cigar or "N" in cigar or "S" in cigar or "H" in cigar or 'P' in cigar:
                        continue
                    else:

                        """
                        recreate reference sequence
                        """
                        refseq = ""
                        newread_seq = ""
                        MD = MD_string.split()[0].rstrip('\n')
                        MDlist = re.findall('(\d+|\D+)',MD)
                        MDcounter = 0
                        for e in MDlist:
                            if e.isdigit():
                                e = int(e)
                                refseq += read_sequence[MDcounter:MDcounter+e]
                                newread_seq += read_sequence[MDcounter:MDcounter+e]
                                MDcounter += int(e)
                            elif '^' in e:
                                continue
                            elif e.isalpha():
                                refseq += e
                                newread_seq += read_sequence[MDcounter]
                                MDcounter += len(e)

                        readlen_dict[min(300,read_length)] += 1
                        mismatch_dict[min(300,read_length)] += [edit_distance/read_length]
                        if "^" not in MD_string:
                            readpos = -1
                            for refseq_allel,read_allel in zip(refseq,newread_seq):
                                readpos += 1
                                if readpos < 31 and readpos < len(newread_seq)-1:
                                    if refseq_allel == "C" and refseq[readpos+1] == "G":
                                        cpg_sites[readpos] += 1
                                        if read_allel == "T":
                                            dna_damage_dict["CpG"][readpos] += 1
                                    if refseq_allel == read_allel:
                                        continue
                                    elif "N" in refseq_allel or "N" in read_allel:
                                        continue
                                    else:
                                        mutation_combination = refseq_allel + read_allel
                                        if mutation_combination in dna_damage_dict:
                                            dna_damage_dict[mutation_combination][readpos] += 1
                                        else:
                                            dna_damage_dict["other"][readpos] += 1
        print("Done calculating mismatch rate and DNA damage")
                                
                        
        #plot mistmatch rate per read length
        x_axis_mismatch = []
        y_axis_mismatch = []
        for i in range(301):
            if len(mismatch_dict[i]) > 10:
                x_axis_mismatch += [i]
                value = mismatch_dict[i]
                y_axis_mismatch += [sum(value)/len(value)]
                if sum(value)/len(value) > max_mismatch:
                    max_mismatch = sum(value)/len(value)
        ax1.scatter(x_axis_mismatch, y_axis_mismatch, s=40, alpha=1, edgecolors="k",label=sample_name,color = colorlist[color_list_index])
        
        #plot read length distribution
        x_axis_readlen = []
        y_axis_readlen = []
        total_reads = sum(readlen_dict.values())
        for i in range(301):
            if readlen_dict[i] > 0:
                x_axis_readlen += [i]
                y_axis_readlen += [(readlen_dict[i]/total_reads)*100]
        
        ax3.fill_between(x_axis_readlen, 0, y_axis_readlen, alpha=0.5,label=sample_name,color=colorlist[color_list_index])
        ax3.plot(x_axis_readlen, y_axis_readlen,color="black",linewidth=2)

        #plot DNA damage by read length
        for key,value in dna_damage_dict.items():
            x_axis_damage = []
            y_axis_damage = []
            for i in range(len(value)):
                x_axis_damage += [i]
                if key == "CT":
                    y_axis_damage += [value[i]/readcounter]
                elif key == "CpG":
                    y_axis_damage += [value[i]/cpg_sites[i]]
                elif key == "other":
                    y_axis_damage += [value[i]/(readcounter*12)] #12 is the number of possible mutations
            if key == "other":
                ax2.plot(x_axis_damage,y_axis_damage,linewidth=1,linestyle='dotted',color=colorlist[color_list_index])
            elif key == "CT":
                ax2.plot(x_axis_damage,y_axis_damage,label=sample_name + ": " + "C to T",linewidth=2,color=colorlist[color_list_index])
            elif key == "CpG":
                ax2.plot(x_axis_damage,y_axis_damage,label=sample_name + ": " + "CpG to TpG",linestyle='dashed',linewidth=2,color=colorlist[color_list_index])

#set up plot axis and position of legend
ax1.set_xlabel("read length (bp)",weight='bold',fontsize=14)
ax1.set_ylabel("mismatches per basepair",weight='bold',fontsize=14)
ax1.set_ylim(0,max(0.01,max_mismatch*2))
ax2.set_ylim(0,0.5)
ax2.set_xlim(0 - 0.5, 30 + 0.5)
ax2.set_xlabel("distance from read end (bp)",weight='bold',fontsize=14)
ax2.set_ylabel("mismatch frequency",weight='bold',fontsize=14)
ax3.set_xlabel("read length (bp)",weight='bold',fontsize=14)
ax3.set_ylabel("% of reads",weight='bold',fontsize=14)
ax4.set_xlabel("depth",weight='bold',fontsize=14)
ax4.set_ylabel("percentage of 1kb windows",weight='bold',fontsize=14)
ax4.set_ylim(0,max_depth*150)
ax1.legend(loc="upper right",edgecolor="black")
ax2.legend(loc="upper right",edgecolor="black")
ax3.legend(loc="upper right",edgecolor="black")
ax4.legend(loc="upper right",edgecolor="black")
plt.savefig(options.output + ".pdf")
plt.close()
print("Finished plotting")
